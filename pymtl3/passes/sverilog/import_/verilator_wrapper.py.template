#=========================================================================
# V{component_name}_v.py
#=========================================================================
"""Provide a template of PyMTL wrapper to import verilated models.

This wrapper makes a Verilator-generated C++ model appear as if it were a
normal PyMTL model. This template is based on PyMTL v2.
"""

import os

from cffi  import FFI

from pymtl3.datatypes import *
from pymtl3.dsl import Component, InPort, OutPort, Wire, M, U, RD, WR

def full_vector( wire, signal ):

  def to_string( num, nbits ):
    ndigits = (nbits-1)/4+1
    return "{{0:#0{{1}}x}}".format( num, ndigits+2 )

  nbits = wire.nbits
  if nbits <= 64:
    return to_string( signal[0], nbits )
  else:
    ret = ""
    num_elements = (nbits-1)/32+1
    for idx in range(num_elements):
      _nbits = 32 if idx != num_elements-1 else nbits%32
      ret = to_string( signal[idx], _nbits )[2:] + ret
    return "0x" + ret

#-------------------------------------------------------------------------
# {component_name}
#-------------------------------------------------------------------------

class {component_name}( Component ):
  id_ = 0

  def __init__( s, *args, **kwargs ):
    s._finalization_count = 0

    # initialize FFI, define the exposed interface
    s.ffi = FFI()
    s.ffi.cdef("""
      typedef struct {{

        // Exposed port interface
{port_cdefs}

        // Verilator model
        void * model;

      }} V{component_name}_t;

      V{component_name}_t * create_model( const char * );
      void destroy_model( V{component_name}_t *);
      void eval( V{component_name}_t * );

    """)

    # Print the modification time stamp of the shared lib
    # print 'Modification time of {{}}: {{}}'.format(
      # '{lib_file}', os.path.getmtime( './{lib_file}' ) )

    # Import the shared library containing the model. We defer
    # construction to the elaborate_logic function to allow the user to
    # set the vcd_file.
    s._ffi_inst = s.ffi.dlopen('./{lib_file}')

    # increment instance count
    {component_name}.id_ += 1

  def finalize( s ):
    """Finalize the imported component.
    
    This method closes the shared library opened through CFFI. If an imported
    component is not finalized explicitly (i.e. if you rely on GC to collect a
    no longer used imported component), importing a component with the same
    name before all previous imported components are GCed might lead to
    confusing behaviors. This is because once opened, the shared lib
    is cached by the OS until the OS reference counter for this lib reaches
    0 (you can decrement the reference counter by calling `dl_close()` syscall).

    Fortunately real designs tend to always have the same shared lib corresponding
    to the components with the same name. If you are doing translation testing and
    use the same component class name even if they refer to different designs,
    you might need to call `imported_object.finalize()` at the end of each test
    to ensure correct behaviors.
    """
    assert s._finalization_count == 0,\
      'Imported component can only be finalized once!'
    s._finalization_count += 1
    s._ffi_inst.destroy_model( s._ffi_m )
    s.ffi.dlclose( s._ffi_inst )
    s.ffi = None
    s._ffi_inst = None

  def __del__( s ):
    if s._finalization_count == 0:
      s._finalization_count += 1
      s._ffi_inst.destroy_model( s._ffi_m )
      s.ffi.dlclose( s._ffi_inst )
      s.ffi = None
      s._ffi_inst = None

  def construct( s, *args, **kwargs ):
    # Set up the VCD file name
    verilator_vcd_file = ""
    if {dump_vcd}:
      verilator_vcd_file = "{component_name}.verilator1.vcd"

    # Construct the model
    s._ffi_m = s._ffi_inst.create_model( s.ffi.new("char[]", list(verilator_vcd_file)) )

    # Use non-attribute varialbe to reduce CPython bytecode count
    _ffi_m = s._ffi_m
    _ffi_inst = s._ffi_inst

    # declare the port interface
{port_defs}

    # declare the wires
{wire_defs}

    # connections between ports and wires
{connections}

    @s.update
    def comb_upblk():
      # Set inputs
{set_comb_input}

      _ffi_inst.eval( _ffi_m )

      # Write all outputs
{set_comb_output}

    def set_output():
{set_comb_output}

    @s.update_on_edge
    def seq_upblk():
      # Advance the clock
      _ffi_m.clk[0] = 0
      _ffi_inst.eval( _ffi_m )
      _ffi_m.clk[0] = 1
      _ffi_inst.eval( _ffi_m )
      set_output()

    {constraint_str}

  def line_trace( s ):
{line_trace}

  def internal_line_trace( s ):
{in_line_trace}
